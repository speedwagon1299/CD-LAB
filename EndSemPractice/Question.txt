You are required to implement two components in C:

1. getNextToken.c: a lexical analyzer that tokenizes a well-defined subset of Perl source code.

2. RDParser.c: a recursive descent parser that parses the tokens generated by getNextToken() and checks for syntactic validity based on a defined grammar.


This subset supports:

1. Expressions (with variables, arithmetic, and grouping)

$a = 5 + 3 * ($b - 2);


2. If-Else statements

if ($x > 10) {
  $y = $x * 2;
} else {
  $y = 0;
}


3. Function definitions and function calls

sub add {
  $sum = $a + $b;
}

add();


4. Array declarations and accesses

@arr = (1, 2, 3);

$val = $arr[0];



Grammar:

Program → StmtList T_EOF

StmtList → Stmt StmtTail
StmtTail → Stmt StmtTail | ε

Stmt → $_ID = Expr ;      
     | @_ID = ( NumList ) ;  
     | FUNC ( ) ;       
     | sub FUNC Block                         
     | if ( Expr ) Block ElseOpt  

ElseOpt → else Block | ε

Block → { StmtList }

Expr → Term ExprTail
ExprTail → + Term ExprTail
         | - Term ExprTail
         | ε

Term → Factor TermTail
TermTail → * Factor TermTail
         | / Factor TermTail
         | ε

Factor → $_ID
       | NUM
       | ( Expr )
       | $_ID [ Expr ]

NumList → NUM NumListTail
NumListTail → , NUM NumListTail | ε
